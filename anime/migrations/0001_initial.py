# Generated by Django 2.1.2 on 2018-10-30 07:54

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='AnimeName')),
                ('release_date', models.CharField(blank=True, max_length=255, null=True, verbose_name='ReleaseDate')),
                ('release_year', models.IntegerField()),
                ('episode_count', models.IntegerField(blank=True, null=True, verbose_name='NumOfEpisodes')),
            ],
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('episode_num', models.IntegerField()),
                ('episode_name', models.CharField(blank=True, max_length=255, null=True)),
                ('length', models.IntegerField(blank=True, null=True)),
                ('anime_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.Anime')),
            ],
        ),
        migrations.CreateModel(
            name='LikeAnime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.Anime')),
            ],
        ),
        migrations.CreateModel(
            name='RateAnime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.Anime')),
            ],
        ),
        migrations.CreateModel(
            name='SetTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Studio',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='StudioName')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('hasAnime', models.ManyToManyField(db_table='TagHasAnime', help_text='Tag has what animes', to='anime.Anime')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('email', models.EmailField(max_length=254, primary_key=True, serialize=False, verbose_name='Email')),
                ('username', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('gender', models.CharField(blank=True, max_length=10, null=True)),
                ('likeEpisode', models.ManyToManyField(to='anime.Episode')),
                ('likeStudio', models.ManyToManyField(help_text='Users like what studios', to='anime.Studio')),
                ('likeTag', models.ManyToManyField(to='anime.Tag')),
            ],
        ),
        migrations.CreateModel(
            name='WatchEpisodeProgress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watch_time', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(auto_now=True, null=True)),
                ('status', models.IntegerField(help_text='Same as status in WatchStatus')),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.Episode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.User')),
            ],
        ),
        migrations.CreateModel(
            name='WatchStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField()),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.Anime')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.User')),
            ],
        ),
        migrations.AddField(
            model_name='settag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.Tag'),
        ),
        migrations.AddField(
            model_name='settag',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.User'),
        ),
        migrations.AddField(
            model_name='rateanime',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.User'),
        ),
        migrations.AddField(
            model_name='likeanime',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='anime.User'),
        ),
        migrations.AddField(
            model_name='anime',
            name='studio',
            field=models.ManyToManyField(db_table='AnimeMadeBy', help_text='Each anime can be made by lots of Studios.', to='anime.Studio'),
        ),
        migrations.AlterUniqueTogether(
            name='watchstatus',
            unique_together={('user', 'anime')},
        ),
        migrations.AlterUniqueTogether(
            name='watchepisodeprogress',
            unique_together={('user', 'episode')},
        ),
        migrations.AlterUniqueTogether(
            name='settag',
            unique_together={('user', 'tag')},
        ),
        migrations.AlterUniqueTogether(
            name='rateanime',
            unique_together={('user', 'anime')},
        ),
        migrations.AlterUniqueTogether(
            name='likeanime',
            unique_together={('user', 'anime')},
        ),
        migrations.AlterUniqueTogether(
            name='episode',
            unique_together={('anime_name', 'episode_num')},
        ),
    ]
